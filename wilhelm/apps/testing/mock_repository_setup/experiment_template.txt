class {0}(PlaylistFactory):

    configfile = stimuluspath('{1}.cfg')
    sys.assert_file_exists(configfile)
    config = configobj.ConfigObj(configfile)

    parameters = config['parameters'].dict()
    memoranda = config['memoranda'].dict()
    instructions = config['instructions'].dict()

    recognition_test_parameters = parameters['recognition']
    text_parameters = parameters['text']
    wordlist_parameters = parameters['wordlist']

    wordlist_recognition_test_times = dict(
        isi = float(recognition_test_parameters['isi']),
        fadeInDuration = float(recognition_test_parameters['fadeInDuration']),
        fadeOutDuration = float(recognition_test_parameters['fadeOutDuration']),
        timeOutDuration = float(recognition_test_parameters['timeOutDuration'])
        )

    text_reading_times = dict(
        minimum_reading_time = float(text_parameters['minimum_reading_time']),
        maximum_reading_time = float(text_parameters['maximum_reading_time'])
        )

    wordlist_display_times = dict(
        isi = float(wordlist_parameters['isi']),
        fadeInDuration = float(wordlist_parameters['fadeInDuration']),
        fadeOutDuration = float(wordlist_parameters['fadeOutDuration']),
        stimulusDuration = float(wordlist_parameters['StimulusDuration'])
        )

    word_recall_parameters = parameters['recall']

    slides = []

    for key, description in config['slides'].items():

        memorandum_name = description['memorandum']

        try:
            memorandum = memoranda[memorandum_name]
        except KeyError:
            errmsg = 'We do not have a record of the memorandum: %s' \
                    % description['memorandum']
            raise KeyError, errmsg

        if description['type'] == 'TextRecognitionMemoryTest':

            slide = TextRecognitionMemoryTest.new(
                name = memorandum_name,
                title = memorandum['title'],
                text = strings.fill(memorandum['text']),
                inwords = memorandum['inwords'].split(),
                outwords = memorandum['outwords'].split(),
                start_text_msg = instructions['start_text_msg'],
                start_memorytest_msg = instructions['start_memorytest_msg'],
                test_times = wordlist_recognition_test_times,
                reading_times = text_reading_times
            )

        elif description['type'] == 'WordListRecognitionMemoryTest':
        
            slide = WordlistRecognitionMemoryTest.new(
                name = memorandum_name,
                inwords = memorandum['inwords'].split(),
                outwords = memorandum['outwords'].split(),
                wordlist = memorandum['wordlist'].split(),
                start_wordlist_msg = instructions['start_wordlist_msg'],
                start_memorytest_msg = instructions['start_memorytest_msg'],
                test_times = wordlist_recognition_test_times,
                wordlist_display_times = wordlist_display_times
            )

        elif description['type'] == 'WordListRecallMemoryTest':

            slide = WordlistRecallMemoryTest.new(
                name = memorandum_name,
                option_length = word_recall_parameters['option_length'],
                wordlist = memorandum['wordlist'].split(),
                start_wordlist_msg = instructions['start_wordlist_msg'],
                start_memorytest_msg = instructions['start_memorytest_msg'],
                wordlist_display_times = wordlist_display_times
            )

        slides.append(slide)
